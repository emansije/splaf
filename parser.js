if (typeof Splaf === "undefined") {
  Splaf = {};
}

Splaf.Parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "statement": parse_statement,
        "attribution": parse_attribution,
        "functionname": parse_functionname,
        "reserved": parse_reserved,
        "identifiername": parse_identifiername,
        "MultiplicativeExpression": parse_MultiplicativeExpression,
        "MultiplicativeOperator": parse_MultiplicativeOperator,
        "AdditiveExpression": parse_AdditiveExpression,
        "AdditiveOperator": parse_AdditiveOperator,
        "ComparisonExpression": parse_ComparisonExpression,
        "ComparisonOperator": parse_ComparisonOperator,
        "UnitaryExpression": parse_UnitaryExpression,
        "NotOperator": parse_NotOperator,
        "LogicalAndExpression": parse_LogicalAndExpression,
        "LogicalOrExpression": parse_LogicalOrExpression,
        "primary": parse_primary,
        "identifier": parse_identifier,
        "literal": parse_literal,
        "integer": parse_integer,
        "real": parse_real,
        "text": parse_text,
        "parenthesis": parse_parenthesis,
        "block": parse_block,
        "if": parse_if,
        "while": parse_while,
        "prompt": parse_prompt,
        "print": parse_print,
        "ws": parse_ws,
        "lb": parse_lb,
        "_": parse__
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        
        reportFailures++;
        result0 = [];
        result1 = parse_statement();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_statement();
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("in\xEDcio");
        }
        return result0;
      }
      
      function parse_statement() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_lb();
          if (result1 !== null) {
            result2 = parse_attribution();
            if (result2 === null) {
              result2 = parse_if();
              if (result2 === null) {
                result2 = parse_while();
                if (result2 === null) {
                  result2 = parse_print();
                  if (result2 === null) {
                    result2 = parse_prompt();
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_lb();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, stmt) { 
              return stmt; 
            })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("declara\xE7\xE3o");
        }
        return result0;
      }
      
      function parse_attribution() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_identifiername();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 61) {
              result2 = "=";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_AdditiveExpression();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, id, val) { 
              return { 
                type: "attribution", 
                name: id, 
                value: val 
              } 
            })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("atribui\xE7\xE3o");
        }
        return result0;
      }
      
      function parse_functionname() {
        var result0;
        
        reportFailures++;
        if (input.substr(pos, 3) === "diz") {
          result0 = "diz";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"diz\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 8) === "enquanto") {
            result0 = "enquanto";
            pos += 8;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"enquanto\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 4) === "pede") {
              result0 = "pede";
              pos += 4;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"pede\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "se") {
                result0 = "se";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"se\"");
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("nome de fun\xE7\xE3o");
        }
        return result0;
      }
      
      function parse_reserved() {
        var result0;
        
        reportFailures++;
        result0 = parse_functionname();
        if (result0 === null) {
          if (input.substr(pos, 6) === "come\xE7a") {
            result0 = "come\xE7a";
            pos += 6;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"come\\xE7a\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 101) {
              result0 = "e";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"e\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 5) === "ent\xE3o") {
                result0 = "ent\xE3o";
                pos += 5;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ent\\xE3o\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 3) === "n\xE3o") {
                  result0 = "n\xE3o";
                  pos += 3;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"n\\xE3o\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 2) === "ou") {
                    result0 = "ou";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"ou\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 7) === "termina") {
                      result0 = "termina";
                      pos += 7;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"termina\"");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("reservado");
        }
        return result0;
      }
      
      function parse_identifiername() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_reserved();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (/^[a-zA-Z_\xE1\xE0\xE3\xE2\xE9\xEA\xED\xF3\xF5\xF4\xFA\xE7\xC1\xC0\xC3\xC2\xC9\xCA\xCD\xD3\xD5\xD4\xDA\xC7]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z_\\xE1\\xE0\\xE3\\xE2\\xE9\\xEA\\xED\\xF3\\xF5\\xF4\\xFA\\xE7\\xC1\\xC0\\xC3\\xC2\\xC9\\xCA\\xCD\\xD3\\xD5\\xD4\\xDA\\xC7]");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[0-9a-zA-Z_\xE1\xE0\xE3\xE2\xE9\xEA\xED\xF3\xF5\xF4\xFA\xE7\xC1\xC0\xC3\xC2\xC9\xCA\xCD\xD3\xD5\xD4\xDA\xC7]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-zA-Z_\\xE1\\xE0\\xE3\\xE2\\xE9\\xEA\\xED\\xF3\\xF5\\xF4\\xFA\\xE7\\xC1\\xC0\\xC3\\xC2\\xC9\\xCA\\xCD\\xD3\\xD5\\xD4\\xDA\\xC7]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[0-9a-zA-Z_\xE1\xE0\xE3\xE2\xE9\xEA\xED\xF3\xF5\xF4\xFA\xE7\xC1\xC0\xC3\xC2\xC9\xCA\xCD\xD3\xD5\xD4\xDA\xC7]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9a-zA-Z_\\xE1\\xE0\\xE3\\xE2\\xE9\\xEA\\xED\\xF3\\xF5\\xF4\\xFA\\xE7\\xC1\\xC0\\xC3\\xC2\\xC9\\xCA\\xCD\\xD3\\xD5\\xD4\\xDA\\xC7]");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) {
              return first + rest.join("")
            })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identificador");
        }
        return result0;
      }
      
      function parse_MultiplicativeExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_UnitaryExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse__();
          if (result2 !== null) {
            result3 = parse_MultiplicativeOperator();
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_UnitaryExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_MultiplicativeOperator();
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_UnitaryExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = {
                  type:     "binaryop",
                  operator: tail[i][1],
                  args:     [result, tail[i][3]]
                };
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_MultiplicativeOperator() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 42) {
          result0 = "*";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 47) {
            result0 = "/";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 37) {
              result0 = "%";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 61) {
            result1 = "=";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, operator) { return operator; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AdditiveExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MultiplicativeExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse__();
          if (result2 !== null) {
            result3 = parse_AdditiveOperator();
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_MultiplicativeExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_AdditiveOperator();
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_MultiplicativeExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = {
                  type:     "binaryop",
                  operator: tail[i][1],
                  args:     [result, tail[i][3]]
                };
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AdditiveOperator() {
        var result0;
        
        if (/^[+\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        return result0;
      }
      
      function parse_ComparisonExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AdditiveExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse__();
          if (result2 !== null) {
            result3 = parse_ComparisonOperator();
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_AdditiveExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_ComparisonOperator();
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_AdditiveExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = {
                  type:     "binaryop",
                  operator: tail[i][1],
                  args:     [result, tail[i][3]]
                };
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("express\xE3o comparativa");
        }
        return result0;
      }
      
      function parse_ComparisonOperator() {
        var result0;
        
        reportFailures++;
        if (input.substr(pos, 2) === ">=") {
          result0 = ">=";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\">=\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 20) === "for maior ou igual a") {
            result0 = "for maior ou igual a";
            pos += 20;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"for maior ou igual a\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 18) === "\xE9 maior ou igual a") {
              result0 = "\xE9 maior ou igual a";
              pos += 18;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\xE9 maior ou igual a\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 62) {
                result0 = ">";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 13) === "for maior que") {
                  result0 = "for maior que";
                  pos += 13;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"for maior que\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 11) === "\xE9 maior que") {
                    result0 = "\xE9 maior que";
                    pos += 11;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\xE9 maior que\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 2) === "<=") {
                      result0 = "<=";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"<=\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 20) === "for menor ou igual a") {
                        result0 = "for menor ou igual a";
                        pos += 20;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"for menor ou igual a\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 18) === "\xE9 menor ou igual a") {
                          result0 = "\xE9 menor ou igual a";
                          pos += 18;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\xE9 menor ou igual a\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 60) {
                            result0 = "<";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"<\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 13) === "for menor que") {
                              result0 = "for menor que";
                              pos += 13;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"for menor que\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 11) === "\xE9 menor que") {
                                result0 = "\xE9 menor que";
                                pos += 11;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"\\xE9 menor que\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 2) === "==") {
                                  result0 = "==";
                                  pos += 2;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"==\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos, 11) === "for igual a") {
                                    result0 = "for igual a";
                                    pos += 11;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"for igual a\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos, 9) === "\xE9 igual a") {
                                      result0 = "\xE9 igual a";
                                      pos += 9;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"\\xE9 igual a\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos, 7) === "igual a") {
                                        result0 = "igual a";
                                        pos += 7;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"igual a\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos, 3) === "for") {
                                          result0 = "for";
                                          pos += 3;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"for\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.charCodeAt(pos) === 233) {
                                            result0 = "\xE9";
                                            pos++;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"\\xE9\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos, 2) === "!=") {
                                              result0 = "!=";
                                              pos += 2;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"!=\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos, 16) === "for diferente de") {
                                                result0 = "for diferente de";
                                                pos += 16;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"for diferente de\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos, 14) === "\xE9 diferente de") {
                                                  result0 = "\xE9 diferente de";
                                                  pos += 14;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"\\xE9 diferente de\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos, 12) === "diferente de") {
                                                    result0 = "diferente de";
                                                    pos += 12;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"diferente de\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.substr(pos, 7) === "n\xE3o for") {
                                                      result0 = "n\xE3o for";
                                                      pos += 7;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"n\\xE3o for\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.substr(pos, 5) === "n\xE3o \xE9") {
                                                        result0 = "n\xE3o \xE9";
                                                        pos += 5;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"n\\xE3o \\xE9\"");
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("operador de compara\xE7\xE3o");
        }
        return result0;
      }
      
      function parse_UnitaryExpression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_NotOperator();
        if (result0 === null) {
          if (input.charCodeAt(pos) === 45) {
            result0 = "-";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_UnitaryExpression();
            if (result2 === null) {
              result2 = parse_primary();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, op, operand) {
              return { 
                type: "unaryop", 
                operator: op, 
                arg: operand 
              }
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_primary();
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("express\xE3o unit\xE1ria");
        }
        return result0;
      }
      
      function parse_NotOperator() {
        var result0;
        
        reportFailures++;
        if (input.substr(pos, 19) === "n\xE3o for verdade que") {
          result0 = "n\xE3o for verdade que";
          pos += 19;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"n\\xE3o for verdade que\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 17) === "n\xE3o \xE9 verdade que") {
            result0 = "n\xE3o \xE9 verdade que";
            pos += 17;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"n\\xE3o \\xE9 verdade que\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "n\xE3o") {
              result0 = "n\xE3o";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"n\\xE3o\"");
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("operador de nega\xE7\xE3o");
        }
        return result0;
      }
      
      function parse_LogicalAndExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_ComparisonExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result3 = parse_ws();
          if (result3 !== null) {
            result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ws();
            }
          } else {
            result2 = null;
          }
          if (result2 !== null) {
            if (input.charCodeAt(pos) === 101) {
              result3 = "e";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"e\"");
              }
            }
            if (result3 !== null) {
              result5 = parse_ws();
              if (result5 !== null) {
                result4 = [];
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ws();
                }
              } else {
                result4 = null;
              }
              if (result4 !== null) {
                result5 = parse_ComparisonExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result3 = parse_ws();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_ws();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 101) {
                result3 = "e";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"e\"");
                }
              }
              if (result3 !== null) {
                result5 = parse_ws();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_ws();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_ComparisonExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = {
                  type:     "binaryop",
                  operator: tail[i][1],
                  args:     [result, tail[i][3]]
                };
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("express\xE3o l\xF3gica 'e'");
        }
        return result0;
      }
      
      function parse_LogicalOrExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LogicalAndExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse__();
          if (result2 !== null) {
            if (input.substr(pos, 2) === "ou") {
              result3 = "ou";
              pos += 2;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"ou\"");
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_LogicalAndExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse__();
            if (result2 !== null) {
              if (input.substr(pos, 2) === "ou") {
                result3 = "ou";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ou\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_LogicalAndExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = {
                  type:     "binaryop",
                  operator: tail[i][1],
                  args:     [result, tail[i][3]]
                };
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("express\xE3o l\xF3gica 'ou'");
        }
        return result0;
      }
      
      function parse_primary() {
        var result0;
        
        reportFailures++;
        result0 = parse_identifier();
        if (result0 === null) {
          result0 = parse_literal();
          if (result0 === null) {
            result0 = parse_parenthesis();
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("express\xE3o prim\xE1ria");
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse_identifiername();
        if (result0 !== null) {
          result0 = (function(offset, id) { 
              return {
                type: "variable", 
                name:id
              }
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identificador");
        }
        return result0;
      }
      
      function parse_literal() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse_real();
        if (result0 === null) {
          result0 = parse_integer();
          if (result0 === null) {
            result0 = parse_text();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, val) {
              return {
                type: "literal",
                value: val
              }
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("literal");
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { 
              return parseInt(digits.join("")); 
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("inteiro");
        }
        return result0;
      }
      
      function parse_real() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_integer();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { 
              return parseFloat(digits.join("")); 
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("real");
        }
        return result0;
      }
      
      function parse_text() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^"]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\"]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^"]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, str) {
              return str.join("")
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("texto");
        }
        return result0;
      }
      
      function parse_parenthesis() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_LogicalOrExpression();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) {
              return val
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("par\xEAntesis");
        }
        return result0;
      }
      
      function parse_block() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "come\xE7a") {
            result1 = "come\xE7a";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"come\\xE7a\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_lb();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_statement();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_statement();
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_lb();
                    if (result6 !== null) {
                      if (input.substr(pos, 7) === "termina") {
                        result7 = "termina";
                        pos += 7;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"termina\"");
                        }
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, stmts) {
              return {
                type: "block",
                code: stmts
              }
            })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("bloco");
        }
        return result0;
      }
      
      function parse_if() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "se") {
          result0 = "se";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"se\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_ws();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ws();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_LogicalOrExpression();
            if (result2 !== null) {
              result4 = parse_ws();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_ws();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.substr(pos, 5) === "ent\xE3o") {
                  result4 = "ent\xE3o";
                  pos += 5;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"ent\\xE3o\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_lb();
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        result8 = parse_statement();
                        if (result8 === null) {
                          result8 = parse_block();
                        }
                        if (result8 !== null) {
                          result9 = parse__();
                          if (result9 !== null) {
                            result10 = parse_lb();
                            if (result10 !== null) {
                              result11 = parse__();
                              if (result11 !== null) {
                                pos2 = pos;
                                if (input.substr(pos, 5) === "sen\xE3o") {
                                  result12 = "sen\xE3o";
                                  pos += 5;
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"sen\\xE3o\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result13 = parse__();
                                  if (result13 !== null) {
                                    result14 = parse_lb();
                                    if (result14 !== null) {
                                      result15 = parse_statement();
                                      if (result15 === null) {
                                        result15 = parse_block();
                                      }
                                      if (result15 !== null) {
                                        result12 = [result12, result13, result14, result15];
                                      } else {
                                        result12 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result12 = null;
                                      pos = pos2;
                                    }
                                  } else {
                                    result12 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result12 = null;
                                  pos = pos2;
                                }
                                result12 = result12 !== null ? result12 : "";
                                if (result12 !== null) {
                                  result13 = parse__();
                                  if (result13 !== null) {
                                    result14 = parse_lb();
                                    if (result14 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cond, ifval, elseval) {
              return {
                type: "if",
                condition: cond,
                value: ifval,
                elsevalue: elseval ? elseval[3] : null
              }
            })(pos0, result0[2], result0[8], result0[12]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("se");
        }
        return result0;
      }
      
      function parse_while() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 8) === "enquanto") {
          result0 = "enquanto";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"enquanto\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_ws();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ws();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_LogicalOrExpression();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_lb();
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_statement();
                    if (result6 === null) {
                      result6 = parse_block();
                    }
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        result8 = parse_lb();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cond, whileval) {
              return {
                type: "while",
                condition: cond,
                value: whileval
              }
            })(pos0, result0[2], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("enquanto");
        }
        return result0;
      }
      
      function parse_prompt() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 4) === "pede") {
          result0 = "pede";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"pede\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_ws();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ws();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_identifiername();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_lb();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, id) {
              return {
                type: "prompt",
                name: id
              }
            })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("pedido");
        }
        return result0;
      }
      
      function parse_print() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "diz") {
          result0 = "diz";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"diz\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_ws();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ws();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_ws();
            result3 = result3 !== null ? result3 : "";
            if (result3 !== null) {
              result4 = parse_ComparisonExpression();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_ws();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result4 = parse_ComparisonExpression();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_lb();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, args) {
              return {
                type: "print",
                arguments: args ? args.map(function(a) { return a[1] }) : null
              }
            })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("apresenta\xE7\xE3o");
        }
        return result0;
      }
      
      function parse_ws() {
        var result0;
        
        reportFailures++;
        if (/^[ \t]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("um espa\xE7o em branco");
        }
        return result0;
      }
      
      function parse_lb() {
        var result0, result1;
        
        reportFailures++;
        result0 = [];
        if (/^[\r\n]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[\\r\\n]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[\r\n]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[\\r\\n]");
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("mudan\xE7a de linha");
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        reportFailures++;
        result0 = [];
        result1 = parse_ws();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ws();
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("espa\xE7o em branco");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
